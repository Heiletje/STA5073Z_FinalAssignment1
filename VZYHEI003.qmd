---
title: "Prediction of Presidents"
---

<h4> Data pre-processing </h4> 

```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries - load relevant packages/lexicons and import data
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# load packages
library(ggplot2) ; library(dplyr) ; suppressMessages(library(tidyverse)) ; library(tidytext) ; library(stringr) ; library(lubridate); library(textdata); library(keras); library(RColorBrewer)

# create dictionary of .txt file names containing data 
textFiles <- c('1994_pre_elections_deKlerk.txt',
               '1994_post_elections_Mandela.txt', '1995_Mandela.txt', '1996_Mandela.txt', 
               '1997_Mandela.txt', '1998_Mandela.txt', '1999_post_elections_Mandela.txt','1999_pre_elections_Mandela.txt', 
               '2000_Mbeki.txt', '2001_Mbeki.txt', '2002_Mbeki.txt', '2003_Mbeki.txt', 
               '2004_post_elections_Mbeki.txt', '2004_pre_elections_Mbeki.txt', '2005_Mbeki.txt', '2006_Mbeki.txt', '2007_Mbeki.txt', '2008_Mbeki.txt', 
               '2009_post_elections_Zuma.txt', '2009_pre_elections_ Motlanthe.txt', '2010_Zuma.txt', '2011_Zuma.txt', '2012_Zuma.txt', '2013_Zuma.txt', 
               '2014_post_elections_Zuma.txt', '2014_pre_elections_Zuma.txt', '2015_Zuma.txt', '2016_Zuma.txt', '2017_Zuma.txt', 
               '2018_Ramaphosa.txt','2019_post_elections_Ramaphosa.txt', '2019_pre_elections_Ramaphosa.txt', '2020_Ramaphosa.txt', 
               '2021_Ramaphosa.txt', '2022_Ramaphosa.txt', '2023_Ramaphosa.txt')

# extract .txt data files from a GitHub source 
this_speech <- c()
this_speech[1] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1994_post_elections_Mandela.txt', nchars = 27050)
this_speech[2] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1994_pre_elections_deKlerk.txt', nchars = 12786)
this_speech[3] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1995_Mandela.txt', nchars = 39019)
this_speech[4] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1996_Mandela.txt', nchars = 39524)
this_speech[5] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1997_Mandela.txt', nchars = 37489)
this_speech[6] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1998_Mandela.txt', nchars = 45247)
this_speech[7] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1999_post_elections_Mandela.txt', nchars = 34674)
this_speech[8] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1999_pre_elections_Mandela.txt', nchars = 41225)
this_speech[9] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2000_Mbeki.txt', nchars = 37552)
this_speech[10] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2001_Mbeki.txt', nchars = 41719)
this_speech[11] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2002_Mbeki.txt', nchars = 50544)
this_speech[12] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2003_Mbeki.txt', nchars = 58284)
this_speech[13] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2004_post_elections_Mbeki.txt', nchars = 34590)
this_speech[14] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2004_pre_elections_Mbeki.txt', nchars = 39232)
this_speech[15] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2005_Mbeki.txt', nchars = 54635)
this_speech[16] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2006_Mbeki.txt', nchars = 48643)
this_speech[17] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2007_Mbeki.txt', nchars = 48641)
this_speech[18] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2008_Mbeki.txt', nchars = 44907)
this_speech[19] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2009_post_elections_Zuma.txt', nchars = 31101)
this_speech[20] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2009_pre_elections_Motlanthe.txt', nchars = 47157)
this_speech[21] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2010_Zuma.txt', nchars = 26384)
this_speech[22] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2011_Zuma.txt', nchars = 33281)
this_speech[23] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2012_Zuma.txt', nchars = 33376)
this_speech[24] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2013_Zuma.txt', nchars = 36006)
this_speech[25] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2014_post_elections_Zuma.txt', nchars = 29403)
this_speech[26] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2014_pre_elections_Zuma.txt', nchars = 36233)
this_speech[27] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2015_Zuma.txt', nchars = 32860)
this_speech[28] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2016_Zuma.txt', nchars = 32464)
this_speech[29] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2017_Zuma.txt', nchars = 35981)
this_speech[30] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2018_Ramaphosa.txt', nchars = 33290)
this_speech[31] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2019_post_elections_Ramaphosa.txt', nchars = 42112)
this_speech[32] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2019_pre_elections_Ramaphosa.txt', nchars = 56960)
this_speech[33] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2020_Ramaphosa.txt', nchars = 47910)
this_speech[34] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2021_Ramaphosa.txt', nchars = 43352)
this_speech[35] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2022_Ramaphosa.txt', nchars = 52972)
this_speech[36] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2022_Ramaphosa.txt', nchars = 52972)

# collate .txt data files into a dataframe
sona <- data.frame(filename = textFiles, speech = this_speech, stringsAsFactors = FALSE)

```


```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# Data wrangling processes
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# set seed for reproudible-research purposes
set.seed(5)

# extract year and president for each speech
sona$year <- str_sub(sona$filename, start = 1, end = 4)
sona$president <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# turn into tidy-text formats (with additional pre-processsing cleaning)
replace_reg <-  '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n' # string of unnecessary text to remove

# parse the date 
sona <-sona %>% mutate(speech = str_replace_all(speech, replace_reg , ' '),
                       date = str_sub(speech, start=1, end=30),
                       date = str_replace_all(date, "February", "02"),
                       date = str_replace_all(date, "June", "06"),
                       date = str_replace_all(date, "Feb", "02"),
                       date = str_replace_all(date, "May", "05"),
                       date = str_replace_all(date, "Jun", "06"),
                       date = str_replace_all(date, "Thursday, ",""),
                       date = str_replace_all(date, ' ', '-'),      
                       date = str_replace_all(date, "[A-z]",''),
                       date = str_replace_all(date, '-----', ''),
                       date = str_replace_all(date, '----', ''),
                       date = str_replace_all(date, '---', ''),
                       date = str_replace_all(date, '--', ''),
                       date = str_replace_all(date, '--', ''),
                       date = str_replace_all(date, '\n', ''))


# select only relevant columns for analysis purposes
sona <- sona %>% select(speech, year, president, date)

```



```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# Exploratory data analysis
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# create a dataframe with the president names and speech counts
president_num_speeches <- as.data.frame(table(sona$president))
colnames(president_num_speeches) <- c("president", "num_speeches")
president_num_speeches$president <- factor(president_num_speeches$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and speech counts
GGpresident_num_speeches <- ggplot(president_num_speeches, aes(x = president, y = num_speeches)) +
                                   geom_bar(stat = "identity", fill = rdgy_palette[1]) +
                                   labs(x = "President", y = "Number of speeches") + 
                                   theme_bw() + theme(legend.box = "horizontal",
                                   panel.grid = element_blank(),
                                   legend.position="bottom", 
                                   axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                   legend.text = element_text(face="bold", size=6),
                                   legend.box.background = element_rect(colour = "black"),
                                   strip.text.x = element_text(size = 15, face = "bold"),
                                   plot.title = element_text(hjust = 0.5),
                                   axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                   axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                   guides(fill = guide_legend(nrow = 1))
GGpresident_num_speeches

```

```{r}
# create sentence-tokenized dataset
tidySentences_sona <- sona %>% unnest_tokens(output = sentence, input = speech, token = "sentences")  

# create a dataframe with the president names and sentence counts
president_num_sentences <- as.data.frame(table(tidySentences_sona$president))
colnames(president_num_sentences) <- c("president", "num_sentences")
president_num_sentences$president <- factor(president_num_sentences$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and sentence counts
GGpresident_num_sentences <- ggplot(president_num_sentences, aes(x = president, y = num_sentences)) +
                                    geom_bar(stat = "identity", fill = rdgy_palette[10]) +
                                    labs(x = "President", y = "Number of sentences") + 
                                    theme_bw() + theme(legend.box = "horizontal",
                                    panel.grid = element_blank(),
                                    legend.position="bottom", 
                                    axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                    legend.text = element_text(face="bold", size=6),
                                    legend.box.background = element_rect(colour = "black"),
                                    strip.text.x = element_text(size = 15, face = "bold"),
                                    plot.title = element_text(hjust = 0.5),
                                    axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                    axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                    guides(fill = guide_legend(nrow = 1))
GGpresident_num_sentences

```

```{r}
# calculate the average length of presidents' sentences (BEFORE removal of stop-words)
president_av_sentence_length_before <- tidySentences_sona %>% group_by(president) %>% select(president, sentence) %>%
                                       summarize(av_sen_length = floor(mean(nchar(sentence)))) 
president_av_sentence_length_before$president <- factor(president_av_sentence_length_before$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and mean sentence length (before removing stop words/other cleaning)
president_av_sentence_length_before <- ggplot(president_av_sentence_length_before, aes(x = president, y = av_sen_length)) +
                                              geom_bar(stat = "identity", fill = rdgy_palette[8]) +
                                              labs(x = "President", y = "Mean sentence length (in words)") + 
                                              theme_bw() + theme(legend.box = "horizontal",
                                              panel.grid = element_blank(),
                                              legend.position="bottom", 
                                              axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                              legend.text = element_text(face="bold", size=6),
                                              legend.box.background = element_rect(colour = "black"),
                                              strip.text.x = element_text(size = 15, face = "bold"),
                                              plot.title = element_text(hjust = 0.5),
                                              axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                              axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                              guides(fill = guide_legend(nrow = 1))
president_av_sentence_length_before

```


```{r}
# create word-tokenized dataset
tidyWord_sona <- tidySentences_sona %>% mutate (sentenceID = row_number()) %>% 
                 unnest_tokens(output = word, input = sentence, token = "words")

# clean dataset 
tidyWord_sona <- tidyWord_sona %>% filter(str_detect(word, "\\D"),                                # retain only all non-digit words
                                          !(nchar(word) < 2),                                     # remove words with excessively short length (< 2 letters)
                                          !word %in% stop_words$word,                             # removal of stop words
                                          !word %in% c('madam', 'madame', 'madames', 'speaker',
                                                       'deputy', 'president', 'senate', 'chief', 
                                                        'honourable', 'member', 'chairperson',
                                                        'south', 'africa', 'african', 'africans')) # remove common words in speech (custom stop word list)

# commented out to make rendering time more efficient and not override data
# tidySentence_sona_final <- tidyWord_sona %>% group_by(year, president,date, sentenceID) %>%
#                            summarize(sentence = paste(word, collapse = " "))
# write.csv(tidySentence_sona_final, "tidySentence_sona_final.csv", row.names=FALSE)

sona_sentences <- read.csv("tidySentence_sona_final.csv")

```


```{r}
# calculate the average length of presidents' sentences (AFTER removal of stop-words)
president_av_sentence_length_after <- sona_sentences %>% group_by(president) %>% select(president, sentence) %>%
                                      summarize(av_sen_length = floor(mean(nchar(sentence)))) 
president_av_sentence_length_after$president <- factor(president_av_sentence_length_after$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and mean sentence length (after removing stop words/other cleaning)
president_av_sentence_length_after <- ggplot(president_av_sentence_length_after, aes(x = president, y = av_sen_length)) +
                                              geom_bar(stat = "identity", fill = rdgy_palette[9]) +
                                              labs(x = "President", y = "Mean sentence length (in words)") + 
                                              theme_bw() + theme(legend.box = "horizontal",
                                              panel.grid = element_blank(),
                                              legend.position="bottom", 
                                              axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                              legend.text = element_text(face="bold", size=6),
                                              legend.box.background = element_rect(colour = "black"),
                                              strip.text.x = element_text(size = 15, face = "bold"),
                                              plot.title = element_text(hjust = 0.5),
                                              axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                              axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                              guides(fill = guide_legend(nrow = 1))
president_av_sentence_length_after


```




