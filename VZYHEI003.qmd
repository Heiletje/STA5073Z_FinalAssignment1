---
title: "Prediction of Presidents"
title-size: small
format: html
execute:
  echo: false
---

<div style="text-align: justify"> 

<h4> Abstract </h4> 
<hr> 


<h4> Introduction </h4> 
<hr> 

<h4> Literature Review </h4> 
<hr> 

<b><u> SONA  </b></u>



<b><u> Machine learning </b></u>


<h4> Data </h4>
<hr>

<b><u> Tokenization </b></u>

<b><u> Pre-processing </b></u>


<h4> Methods </h4>
<hr>

<b><u> Classification Tree (CT) </b></u>

<b><u> Feed-forward Neural Network (NN) </b></u>

<b><u> Convolutional Neural Network (CNN) </b></u>

<b><u> Model performance metrics </b></u>


```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# preliminaries: load relevant packages/lexicons and import data
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# load packages
library(ggplot2) ; suppressMessages(library(dplyr)) ; suppressMessages(library(tidyverse)) ; library(tidytext) ; library(stringr) ; suppressMessages(library(lubridate)) ; library(textdata) ; suppressMessages(library(keras)) ; library(RColorBrewer); suppressMessages(library(kerastuneR)) ; suppressMessages(library(tensorflow))

# create dictionary of .txt file names containing data 
textFiles <- c('1994_pre_elections_deKlerk.txt',
               '1994_post_elections_Mandela.txt', '1995_Mandela.txt', '1996_Mandela.txt', 
               '1997_Mandela.txt', '1998_Mandela.txt', '1999_post_elections_Mandela.txt','1999_pre_elections_Mandela.txt', 
               '2000_Mbeki.txt', '2001_Mbeki.txt', '2002_Mbeki.txt', '2003_Mbeki.txt', 
               '2004_post_elections_Mbeki.txt', '2004_pre_elections_Mbeki.txt', '2005_Mbeki.txt', '2006_Mbeki.txt', '2007_Mbeki.txt', '2008_Mbeki.txt', 
               '2009_post_elections_Zuma.txt', '2009_pre_elections_ Motlanthe.txt', '2010_Zuma.txt', '2011_Zuma.txt', '2012_Zuma.txt', '2013_Zuma.txt', 
               '2014_post_elections_Zuma.txt', '2014_pre_elections_Zuma.txt', '2015_Zuma.txt', '2016_Zuma.txt', '2017_Zuma.txt', 
               '2018_Ramaphosa.txt','2019_post_elections_Ramaphosa.txt', '2019_pre_elections_Ramaphosa.txt', '2020_Ramaphosa.txt', 
               '2021_Ramaphosa.txt', '2022_Ramaphosa.txt', '2023_Ramaphosa.txt')

# extract .txt data files from a GitHub source 
this_speech <- c()
this_speech[1] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1994_post_elections_Mandela.txt', nchars = 27050)
this_speech[2] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1994_pre_elections_deKlerk.txt', nchars = 12786)
this_speech[3] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1995_Mandela.txt', nchars = 39019)
this_speech[4] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1996_Mandela.txt', nchars = 39524)
this_speech[5] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1997_Mandela.txt', nchars = 37489)
this_speech[6] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1998_Mandela.txt', nchars = 45247)
this_speech[7] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1999_post_elections_Mandela.txt', nchars = 34674)
this_speech[8] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/1999_pre_elections_Mandela.txt', nchars = 41225)
this_speech[9] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2000_Mbeki.txt', nchars = 37552)
this_speech[10] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2001_Mbeki.txt', nchars = 41719)
this_speech[11] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2002_Mbeki.txt', nchars = 50544)
this_speech[12] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2003_Mbeki.txt', nchars = 58284)
this_speech[13] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2004_post_elections_Mbeki.txt', nchars = 34590)
this_speech[14] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2004_pre_elections_Mbeki.txt', nchars = 39232)
this_speech[15] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2005_Mbeki.txt', nchars = 54635)
this_speech[16] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2006_Mbeki.txt', nchars = 48643)
this_speech[17] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2007_Mbeki.txt', nchars = 48641)
this_speech[18] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2008_Mbeki.txt', nchars = 44907)
this_speech[19] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2009_post_elections_Zuma.txt', nchars = 31101)
this_speech[20] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2009_pre_elections_Motlanthe.txt', nchars = 47157)
this_speech[21] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2010_Zuma.txt', nchars = 26384)
this_speech[22] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2011_Zuma.txt', nchars = 33281)
this_speech[23] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2012_Zuma.txt', nchars = 33376)
this_speech[24] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2013_Zuma.txt', nchars = 36006)
this_speech[25] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2014_post_elections_Zuma.txt', nchars = 29403)
this_speech[26] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2014_pre_elections_Zuma.txt', nchars = 36233)
this_speech[27] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2015_Zuma.txt', nchars = 32860)
this_speech[28] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2016_Zuma.txt', nchars = 32464)
this_speech[29] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2017_Zuma.txt', nchars = 35981)
this_speech[30] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2018_Ramaphosa.txt', nchars = 33290)
this_speech[31] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2019_post_elections_Ramaphosa.txt', nchars = 42112)
this_speech[32] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2019_pre_elections_Ramaphosa.txt', nchars = 56960)
this_speech[33] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2020_Ramaphosa.txt', nchars = 47910)
this_speech[34] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2021_Ramaphosa.txt', nchars = 43352)
this_speech[35] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2022_Ramaphosa.txt', nchars = 52972)
this_speech[36] <- readChar('https://raw.githubusercontent.com/iandurbach/datasci-fi/master/data/sona/2022_Ramaphosa.txt', nchars = 52972)

# collate .txt data files into a dataframe
sona <- data.frame(filename = textFiles, speech = this_speech, stringsAsFactors = FALSE)

sona <- write.csv("sona.csv")


```


```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# data pre-processing 
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# set seed for reproducible-research purposes
set.seed(5)

# extract year and president for each speech
sona$year <- str_sub(sona$filename, start = 1, end = 4)
sona$president <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# turn into tidy-text formats (with additional pre-processsing cleaning)
replace_reg <-  '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n' # string of unnecessary text to remove

# parse the date 
sona <-sona %>% mutate(speech = str_replace_all(speech, replace_reg , ' '),
                       date = str_sub(speech, start=1, end=30),
                       date = str_replace_all(date, "February", "02"),
                       date = str_replace_all(date, "June", "06"),
                       date = str_replace_all(date, "Feb", "02"),
                       date = str_replace_all(date, "May", "05"),
                       date = str_replace_all(date, "Jun", "06"),
                       date = str_replace_all(date, "Thursday, ",""),
                       date = str_replace_all(date, ' ', '-'),      
                       date = str_replace_all(date, "[A-z]",''),
                       date = str_replace_all(date, '-----', ''),
                       date = str_replace_all(date, '----', ''),
                       date = str_replace_all(date, '---', ''),
                       date = str_replace_all(date, '--', ''),
                       date = str_replace_all(date, '--', ''),
                       date = str_replace_all(date, '\n', ''))


# select only relevant columns for analysis purposes
sona <- sona %>% select(speech, year, president, date)

```

<h4> Exploratory Data Analysis </h4> 
<hr> 

Figure 1 


```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# exploratory data analysis: plot speech counts
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# create a dataframe with the president names and speech counts
president_num_speeches <- as.data.frame(table(sona$president))
colnames(president_num_speeches) <- c("president", "num_speeches")
president_num_speeches$president <- factor(president_num_speeches$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and speech counts
GGpresident_num_speeches <- ggplot(president_num_speeches, aes(x = president, y = num_speeches)) +
                                   geom_bar(stat = "identity", fill = rdgy_palette[1]) +
                                   labs(x = "President", y = "Number of speeches") + 
                                   theme_bw() + theme(legend.box = "horizontal",
                                   panel.grid = element_blank(),
                                   legend.position="bottom", 
                                   axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                   legend.text = element_text(face="bold", size=6),
                                   legend.box.background = element_rect(colour = "black"),
                                   strip.text.x = element_text(size = 15, face = "bold"),
                                   plot.title = element_text(hjust = 0.5),
                                   axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                   axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                   guides(fill = guide_legend(nrow = 1))
GGpresident_num_speeches

```



```{r}
library(reticulate)
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# exploratory data analysis: plot sentence counts ; data pre-processing: sentence tokenization
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# omit de Klerk and Motlanthe due to prior finding of few number of speeches
sona4presidents <- sona %>% filter(president %in% c('Mandela', 'Mbeki', 'Zuma', 'Ramaphosa'))

# create sentence-tokenized dataset
tidySentences_sona4presidents <- sona4presidents %>% unnest_tokens(output = sentence, input = speech, token = "sentences")  

# create a dataframe with the president names and sentence counts
president_num_sentences <- as.data.frame(table(tidySentences_sona4presidents$president))
colnames(president_num_sentences) <- c("president", "num_sentences")
president_num_sentences$president <- factor(president_num_sentences$president, levels = c("Mandela", "Mbeki", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and sentence counts
GGpresident_num_sentences <- ggplot(president_num_sentences, aes(x = president, y = num_sentences)) +
                                    geom_bar(stat = "identity", fill = rdgy_palette[10]) +
                                    labs(x = "President", y = "Number of sentences") + 
                                    theme_bw() + theme(legend.box = "horizontal",
                                    panel.grid = element_blank(),
                                    legend.position="bottom", 
                                    axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                    legend.text = element_text(face="bold", size=6),
                                    legend.box.background = element_rect(colour = "black"),
                                    strip.text.x = element_text(size = 15, face = "bold"),
                                    plot.title = element_text(hjust = 0.5),
                                    axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                    axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                    guides(fill = guide_legend(nrow = 1))
GGpresident_num_sentences

```

```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# exploratory data analysis:  plot average sentence lengths
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# calculate the average length of presidents' sentences (before balancing data)
president_av_sentence_length_before <- tidySentences_sona4presidents %>% group_by(president) %>% select(president, sentence) %>%
                                       summarize(av_sen_length = floor(mean(nchar(sentence)))) 
president_av_sentence_length_before$president <- factor(president_av_sentence_length_before$president, levels = c("Mandela", "Mbeki", "Zuma", "Ramaphosa"))

# define the number of colours from RdGy palette
num_colors <- 10
# create custom RdGy colour palette
rdgy_palette <- brewer.pal(num_colors, "RdGy")

# create a bar plot of presidents names and mean sentence length (before removing stop words/other cleaning)
president_av_sentence_length_before <- ggplot(president_av_sentence_length_before, aes(x = president, y = av_sen_length)) +
                                              geom_bar(stat = "identity", fill = rdgy_palette[8]) +
                                              labs(x = "President", y = "Mean sentence length (in words)") + 
                                              theme_bw() + theme(legend.box = "horizontal",
                                              panel.grid = element_blank(),
                                              legend.position="bottom", 
                                              axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                              legend.text = element_text(face="bold", size=6),
                                              legend.box.background = element_rect(colour = "black"),
                                              strip.text.x = element_text(size = 15, face = "bold"),
                                              plot.title = element_text(hjust = 0.5),
                                              axis.text.x = element_text(family = "Andale Mono", face="bold", size=11, angle = 55, hjust = 1),
                                              axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                              guides(fill = guide_legend(nrow = 1))
president_av_sentence_length_before

```



```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# data pre-processing: data balancing, word tokenization
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# necessary to find sentence-by-president sample due prior finding of imbalance in number of sentences (Mandela with very little compared to Zuma, for example)
set.seed(5)
tidySentences_sona4presidents_balanced <- tidySentences_sona4presidents %>% 
                                          group_by(president) %>% slice_sample(n=1000) %>% ungroup() # sample 1000 random speeches
# check
# table(tidySentences_sona4presidents_balanced$president) 

# create word-tokens with this now balanced speech data 
tidyWord_sona <- tidySentences_sona4presidents_balanced %>% mutate (sentenceID = row_number()) %>% 
                 unnest_tokens(output = word, input = sentence, token = "words")

# clean word-tokenized, balanced speech data 
tidyWord_sona <- tidyWord_sona %>% filter(str_detect(word, "\\D"),                                # retain only all non-digit words
                                          !(nchar(word) < 2),                                     # remove words with excessively short length (< 2 letters)
                                          !word %in% stop_words$word,                             # removal of stop words
                                          !word %in% c('madam', 'madame', 'madames', 'speaker',
                                                       'deputy', 'president', 'senate', 'chief', 
                                                        'honourable', 'member', 'chairperson',
                                                        'south', 'africa', 'african', 'africans')) # remove common words in speech (custom stop word list)

# commented out to make rendering time more efficient and not override data
# tidySentence_sona_final <- tidyWord_sona %>% group_by(year, president,date, sentenceID) %>%
#                            summarize(sentence = paste(word, collapse = " "))
# write.csv(tidySentence_sona_final, "tidySentence_sona_final.csv", row.names=FALSE)

sona_sentences <- read.csv("tidySentence_sona_final.csv")
```


```{r, .hide, message=FALSE}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# exploratory data analysis: plot top frequent words across all speeches and stratified by president
#---------------------------------------------------------------------------------------------------------------------------------------------------------

# create custom RdGy colour palette
suppressWarnings({rdgy_palette <- brewer.pal(10, "RdGy")})

# plot most frequent unigram (one word) used across all presidents 
freq_words_allspeeches <- tidyWord_sona %>% count(word, sort = TRUE) %>%
                          top_n(15) %>%
                          mutate(word = reorder(word, n)) %>%
                          ggplot(aes(n, word)) + geom_col(fill = rdgy_palette[9]) +
                          labs(y = " ", x = "Number of times word appears") + 
                          theme_bw() + theme(legend.box = "horizontal",
                                              panel.grid = element_blank(),
                                              legend.position="bottom", 
                                              axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                              legend.text = element_text(face="bold", size=6),
                                              legend.box.background = element_rect(colour = "black"),
                                              strip.text.x = element_text(size = 15, face = "bold"),
                                              plot.title = element_text(hjust = 0.5),
                                              axis.text.x = element_text(family = "Andale Mono", face="bold", size=11),
                                              axis.text.y = element_text(family = "Andale Mono", face="bold", size=11)) +
                                              guides(fill = guide_legend(nrow = 1))
freq_words_allspeeches

# define the number of colours from RdGy palette
num_colors <- 12
# create custom RdGy colour palette
suppressWarnings({rdgy_palette <- brewer.pal(num_colors, "RdGy")})
suppressWarnings({rdgy_palette <- c(rdgy_palette[1:2], rdgy_palette[7], rdgy_palette[9:11])})

tidyWord_sona$president <- factor(tidyWord_sona$president, levels = c("deKlerk", "Mandela", "Mbeki", "Motlanthe", "Zuma", "Ramaphosa"))
# plot most frequent unigram (one word) used across all presidents
freq_words_bypresident <- tidyWord_sona %>% count(president, word, sort = TRUE) %>%
                          group_by(president) %>%
                          top_n(15) %>% ungroup() %>%
                          ggplot(aes(n, word, fill = president)) +
                          geom_col() +
                          scale_fill_manual(values = rdgy_palette) + 
                          facet_wrap(~president, scales = "free") +
                          labs(y = " ", x = "Number of times word appears") + 
                          theme_bw() + theme(legend.box = "horizontal",
                                              panel.grid = element_blank(),
                                              legend.position="none", 
                                              axis.title = element_text(family = "Andale Mono", face="bold", size=13),
                                              legend.text = element_text(face="bold", size=6),
                                              legend.box.background = element_rect(colour = "black"),
                                              strip.text.x = element_text(family = "Andale Mono", size = 11, face = "bold"),
                                              plot.title = element_text(hjust = 0.5),
                                              axis.text.x = element_text(family = "Andale Mono", face="bold", size=8),
                                              axis.text.y = element_text(family = "Andale Mono", face="bold", size=9)) +
                                              guides(fill = guide_legend(nrow = 1))
freq_words_bypresident

```




```{r}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# create three different data structures: bag-of-words, tf-idf, and embeddings
#---------------------------------------------------------------------------------------------------------------------------------------------------------



```


```{r, eval = FALSE}
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# predictive modelling
# ~ model 1: simple classification tree with bag-of-words features 
#---------------------------------------------------------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------
# create bag-of-words features
#---------------------------------------------------------------------------------------------------
# use cleaned (e.g., removal of stop words, etc.) and balanced presidents' sentences for analysis purposes
# create bag-of-words model ~ using 150 most frequent words for the four aforementioned presidents
word_bag <- tidyWord_sona %>%
  group_by(word) %>%
  count() %>%
  ungroup() %>%
  top_n(150, wt = n) %>%
  select(-n)
nrow(word_bag) # actually extracted 155 words to use as features

speech_tdf <- tidyWord_sona %>% 
  inner_join(word_bag) %>%
  group_by(sentenceID, word) %>%
  count() %>%  
  group_by(sentenceID) %>%
  mutate(total = sum(n)) %>%
  ungroup()

bag_of_words <- speech_tdf %>% 
  select(sentenceID, word, n) %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0) %>%
  left_join(sona_sentences %>% select(sentenceID, president)) %>%
  select(sentenceID, president, everything())

# number of speeches
nrow(bag_of_words) # 3509
# number of speeches per president 
table(bag_of_words$president)
# Mandela = 873; Mbeki = 893; Ramaphosa = 882; Zuma = 861 
# meaning: lost 127, 107, 118, 139 words lost, respectively by taking 155 most frequent words

# necessary to balance presidential classes again, 
# to achieve this: randomly select speeches equivalent to number in minority presidential class
min_class_size <- min(table(bag_of_words$president))
bag_of_words <- bag_of_words %>% group_by(president) %>% sample_n(min_class_size) %>% ungroup()
table(bag_of_words$president)




#---------------------------------------------------------------------------------------------------
# create training and testing subsets
#---------------------------------------------------------------------------------------------------
set.seed(5)
training_ids <- bag_of_words %>% 
  group_by(president) %>% 
  slice_sample(prop = 0.8) %>%    # specify 80% ~ which will be proportioned as 60% for training; 20% for validation 
  ungroup() %>%
  select(sentenceID) 

training_speeches <- bag_of_words %>% 
  right_join(training_ids, by = 'sentenceID') %>%
  select(-sentenceID)

test_speeches <- bag_of_words %>% 
  anti_join(training_ids, by = 'sentenceID') %>%
  select(-sentenceID)

train <- list()
test <- list()
train$x <- as.matrix(bag_of_words[training_ids$sentenceID,-c(1,2)])
test$x <-  as.matrix(bag_of_words[-training_ids$sentenceID,-c(1,2)])

train$y <- as.factor(bag_of_words$president[training_ids$sentenceID])
test$y <-  as.factor(bag_of_words$president[-training_ids$sentenceID])

#---------------------------------------------------------------------------------------------------
# fitting the classification tree
#---------------------------------------------------------------------------------------------------
fit <- rpart(president ~ ., training_speeches, method = 'class')
plot(fit, main = 'Full Classification Tree')
text(fit, use.n = TRUE, all = TRUE, cex=.8)

fittedtrain <- predict(fit, type = 'class')
predtrain <- table(training_speeches$president, fittedtrain)
predtrain
round(sum(diag(predtrain))/sum(predtrain), 3) # training accuracy

fittedtest <- predict(fit, newdata = test_speeches, type = 'class')
predtest <- table(test_speeches$president, fittedtest)
predtest
round(sum(diag(predtest))/sum(predtest), 3) # test accuracy

```






<h4> Results </h4> 
<hr> 

<h5> Overall model performance </h5>

<b><u> Accuracy </b></u>

<b><u> F1-score </b></u>

<h5> Overall model performance </h5>


<h4> Discussion and Conclusion </h4> 
<hr> 


<h4> References </h4> 
<hr> 

</div> 



